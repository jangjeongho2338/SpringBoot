스프링부트
    - 역사 : 2004년 3월 java애플리케이션을 더 쉽게 개발 할 수 있는 플랫폼 제공을 목표로 1.0버전이 공식 배포
    - 지속성, 보안, 통합, 클라우드 컴퓨팅 등을 포함한 일반적인 개발 과제를 단순하게 해결하는 프레임워크 지향
    - spring : spring framework 기반 프로젝트를 통칭하는 용어로 사용
    - spring framework 6.x 지원 환경 : java 17+, jakarta ee9, Tomcat 10.1, Jetty11, Undertow 2.3

특징
    - spring : 겨울의 복잡성을 극복한 새로운 세대의 기술이라는의미로 봄을 의미
    - Application Context(Bean Container) : 애플리케이션 구성 요소를 생성하고 관리하는 컨테이너를 제공
    - 의존성 주입(DI) : 생성자의 파라메터 또는 속성 접근자 메서드를 이용
    - 전자정부 표준 프레임워크 기반 기술 : 대한민국 공공기관의 웹 애플리케이션 개발시 사용이 권장되는 국가 관리 공식 프레임워크

스프링 모듈
    - Spring Framework(Core)
	- 핵심 컨테이너 및 의존성 주입 프레임워크 MVC,web
    - Spring WebFlux
	- Web Framework의 Reactive Stack, 완전한 비차단 지원(데이터를 읽고 쓰는 I/O 처리시 스레드가 대기하지 않고 다른
      	   작업을 수행 하도록 전환되는 방식, 비동기전 처리방식으로 구현되며, 이벤트 루프와 같은 구현체가 있다)
    - Spring Boot
	- 독립 실행형 Spring 애플리케이션 지원, 서블릿 컨테이너 내장, 빌트 구성을 단순화 하기위해 스타터 종속성 사용
	- Spring및 타사 라이브러리 자동 구성, XML구성이 필요 없음
    - Spring Data
	- 애플리케이션의 Data저장소를 Java 인터페이스로 정의, 데이터를 저장하고 검색하는 방법을 명명 규칙을 사용
	- 관계형, 문서, 그래프 등을 포함한 여러 종류의 데이터베이스와 연동 기능 제공
    - Spring Security
	- 강력한 보안 프레임워크, 인증 권한 부여 및 API보안을 포함한 애플리케이션 보안을 처리
    - Spring Intergration
	- 메시징을 통해 내/외부 애플리케이션 간의 통합을 제공
    - Spring Batch
	- 배치 애플리케이션 개발을 가능하게 설계된 가볍고 포괄적인 배치 프레임워크
	- 로깅/추척, 트랜잭션 관리, 작업처리 통계, 작업 재시작, 건너뛰기 및 리소스 관리,대량의 레코드 처리에 필수적인 재사용 가능
	   기능 제공
    - Spring Cloud
	- Spring을 이용한 클라우드 네이티브 애플리케이션 개발을 지원
	- 개발자가 분산 시스템에서 일반적인 패턴을 빠르게 빌드할 수 있는 도구 제공(구성 관리, 서비스 컴색, 회로 차단기,제이버스등등)
    - Spring Native
	- Spring Boot 프로젝트를 네이티브 실행 파일로 컴파일 할 수 있게 지원

Cloud Computing
    - 사용자의 직접적인 관리 없이 데이터 스토리지, 네트워크, 컴퓨팅 파워등 컴퓨터 시스템 자원을 필요시 즉시 제공 받을 수 있는 서비스

Spring Boot
    - 자동 설정
	- 클래스경로에 있는 라이브러리를 기반으로 자동 구성 제공
	- 라이브러리를 통합하는 설정이 범용적인 설정으로 자동 구성됨
    - 서버리스 개발환경
	- Tomcat, Jetty,Undertow와 같은 내장 서버가 Spring Boot에 통합되어 제공됨
	- 애플리케이션을 웹 서버에 배포할 필요가 없어 배포 절차가 간소화됨
    - 마이크로서비스
	- 소프트웨어가 잘 정의된 API를 통해 통신
	- 소규모의 독립적인 서비스로 구성됨
	- 소프트웨어 개발을 위한 아키텍처 및 조직적 접근 방식
	- 독립정인 소규모 팀에서 보유
	- Spring Boot는 마이크로 서비스를 개발하기에 적합
    - 클라우드 네이티브
	- 클라우드에서 제공하는 분산 컴퓨팅 기술을 활용하는 애플리케이션을 구축 및 실행하는 개념
	- 애플리케이션은 클라우드가 제공하는 확장성, 탄력성, 복원성, 유연성을 활용하도록 설계 및 구축됨
	- Cloud Natibe Computong Foundation이 정의함
	- 클라우드 네이티브 기술은 조직이 퍼블릭, 프라이빗, 하이브리드 클라우드에서 확장 가능한 애플리케이션을 구축하고 실행 가능
	   하도록 지원
    - 클라우드 네이티브 애플리케이션
	- 클라우드 환경에서 동작하는 것을 전제로 개발된 애플리케이션
	- 특징
	    - 독립성 : 클라우드 네이티브 애플리케이션을 서로 독립적으로 구축가능
	    - 복원성 : 인프라스트럭처가 중단되어도 온라인 상태 유지 가능
	    - 표준 기반 : 상호 운용성과 작업 로드 이식성을 위해 오픈 소스 및 표준 기반 기술에 기반함
	    - 비즈니스 민첩성 : 네트워크에서 유연한 배포 옵션 제공, 기존 앱보다 작아서 쉽게 개발, 배포, 반복 작업 수행 가능
	    - 자동화 : DevOps 자동화 기능을 사용하여 정기적으로 배포되는 소프트웨어 변경사항을 지속적으로 전달 배포 가능
	    - 작동 중지 시간 없음 : Kubernetes와 같은 컨테이너 통합관리자를 이용하여 다운타입 없이 소프트웨어 업데이트 배포 가능

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Spring Boot Project 
    - Spring Boot 응용 프로그램 개발을 위한 환경
	- 디렉토리 구조, 각종 설정 파일 및 경로
    - 프로젝트 관리 도구인 Maven 또는 Gradle을 이용하여 빌드, 패키징등을 지원 받을 수 있음
    - 프로젝트 관리 도구는 프로젝트의 구조를 정의

Spring Boot Project 생성 방법
    - 프로젝트 디렉토리 구조와 빌드 사양을 수동으로 정의하는 방법
	- 불필요한 시간 낭비
    - Spring Initializr를 사용하여 애플리케이션을 생성하는 방법
	- 온라인 환경에서 사용가능

Spring Initializr란?
    - REST API로 동작하는 웹 애플리케이션
    - Spring Project의 뼈대 구조를 자동 생성
    - 실행 중 또는 프로젝트 생성 후에 원하는 기능을 추가 가능

Spring의 릴리즈 버전 종류
    - SNAPSHOT
	- 개발 중 자동 빌드 되는 버전
	- 개발 및 실험 중인 버전으로 미완의 신규 개발되는 기능이 있을 수 있다
    - MN
	- Milestone build로 n은 마일스톤 번호(M1, M2등)
	- 배포 예정인 기능 중 일부가 미구현 상태일 수 있음
	- SNAPSHOT보다는 안정적이지만 문제가 있을 수 있음
    - RC
	- Release Candidate(배포 후보 버전)
	- 기능은 완전하고 상당히 안정적인 버전
	- GA배포 되기전에 일부 변경이 있을 수 있음
    - GA 또는 생략
	- General Availability(공개 버전)
	- 일반 사용자들이 사용할 수 있는 릴리즈(배포) 버전
	- 안정적인 버전으로 모든기능이 완전히 구현된 버전
    - 안정성은 GA부터 SNAPSHOT까지 역순으로 안정적임

Maven에서 Scope
    - 종속성 범위(Dependency scope)
	- 종속성의 전이성을 제한하고 종속성이 클래스 경로에 포함되는 시정을 결정
    - 종속성 범위 종류
	- compile
	    - 기본 범위이다 설정하지 않으면 적용됨
	    - 프로젝트의 모든 클래스 경로에서 사용할 수 있음
	    - 종속 프로젝트로 전파됨
	- provided
	    - 컴파일과 유사
	    - JDK 또는 컨테이너가 런타임에 종속성을 제공
	    - 컴파일 및 테스트 단계에 클래스 경로에 추가되지만 런타임 단계에는 추가되지 않음
	- runtime
	    - 컴파일에 필요하지 않지만 실행에는 필요한 종속성을 의미
	    - Maven은 런타임 및 테스트 클래스 경로에 이 범위가 있는 종속성을 포함하지만 컴파일에는 포함하지 않음
	- test
	    - 테스트 컴파일 및 테스트 실행 단계에서만 사용할 수 있음
	- system
	    - provided와 유사하지만 명시적으로 포함된 JAR을 제공해야함
	    - 항상 사용가능하며 Maven Repository에서 조회하지 않음
	- import
	    - <dependencyManagement>섹션의 pom 유형의 종속성에서만 지원됨
	    - 종속성이 저장된 POM의 <dependencyManagement> 섹션에 있는 종속성 목록으로 대체됨
